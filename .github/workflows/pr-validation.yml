name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]

permissions:
  issues: write
  pull-requests: write

env:
  JAVA_VERSION: '17'

jobs:
  quick-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Validate POM
      run: mvn validate
      
    - name: Compile code
      run: mvn compile
      
    - name: Run tests
      run: mvn test
      
    - name: Check code style
      run: mvn checkstyle:check
      continue-on-error: true
      
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      env:
        JOB_STATUS: ${{ job.status }}
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Validation Results')
          );
          
          const isSuccess = process.env.JOB_STATUS === 'success';
          
          const commentBody = `## PR Validation Results ${isSuccess ? '✅' : '❌'}
          
          **Build Status**: ${isSuccess ? '✅ Passed' : '❌ Failed'}
          
          **Tests**: All tests passed
          **Compilation**: Successful
          **Code Style**: ${isSuccess ? '✅ Passed' : '⚠️ Issues found'}
          
          _This is an automated validation check for your pull request._`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } 
            